# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K5pNmXXPgpGKUSgSglVDLo2Rk3Ac-OMc
"""

import numpy as np

arr = np.array([1,2,3,4])
print(arr)
print(type(arr))

#0으로 초기화된 배열
zarr = np.zeros((3,3))
print(zarr)

# 빈 값으로 만들어진 배열
earr = np.empty((4,4))
print(earr)

#1로 가득찬 배열
oarr = np.ones((3,3))
print(oarr)
#숫자뒤에 .이 있는 이유 : 실수형
#.이 없으면 정수형

#배열의 생성
arr = np.arange(10) #0~9까지 생성
print(arr)

#ndarray 배열의 모양, 차수, 데이터 타입 확인
arr = np.array([[1,2,3],[4,5,6]])
print(arr)

arr.shape #몇행 몇열

arr.ndim #차원

arr.dtype #데이터타입

arr_float = arr.astype(np.float64) #형 변환
arr_float.dtype

arr_str = np.array(['1','2','3'])
arr_str.dtype
#<U1 : 유니코드

arr_int = arr_str.astype(np.int64)
arr_int.dtype

# ndarray 배열의 연산
arr1 = np.array([[1,2,3],[4,5,6]])
arr2 = np.array([[7,8,9],[10,11,12]])

arr1+arr2 #합

np.add(arr1, arr2) #합 명령어

arr1 * arr2 #곱

np.multiply(arr1, arr2) #곱 명령어

# nadarray배열 슬라이싱
arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr.ndim

arr_1 = arr[:2,1:3]
print(arr_1)

arr[0,2]

arr[0,1:-1]

arr[[0,1,2],[2,0,1]]

index = arr > 3 #3보다 같거나 작으면 false, 3보다 크면 true

print(index)

print(arr[index]) #index를 arr의 매개변수로 함, 조건에 맞는 것만 새로운 배열로 재구성

redwine = np.loadtxt(fname = 'winequality-red.csv', delimiter = ';', skiprows = 1) #delimiter : 구별자

print(redwine)

print(redwine.sum()) #전체에 대한 합

print(redwine.mean())

print(redwine.sum(axis=0))
print(redwine.mean(axis=0))

redwine[:,0].mean()

redwine.max()

redwine.max(axis=0)

redwine.min(axis=0)

