# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y7kUlJ2wjJFT3P5tWT0f5nMZb3ozSW6D
"""

!pip install pandas

from pandas import Series

fruit = Series([2500,3800,1200,6000], index = ['apple', 'banana','peer','cherry'])

fruit

#값과 인덱스 추출
print(fruit.values)
print(fruit.index)

#Dict 타입을 Series안에 넣기
fruitData = {'apple':2500,'banana':3800, 'peer':1200,'cherry':6000}
fruit = Series(fruitData)
print(type(fruitData))
print(type(fruit))

fruit

# Series 객체의 이름과 컬럼명을 설정해보자
fruit.name = 'fruitPrice'
fruit.index.name = 'fruitName'

fruit

#DataFrame
fruitData = {'fruitName':['apple','banana','cherry','peer'],
             'fruitPrice':[2500,3800,6000,1200],
             'num':[10,5,3,8]
             }

from pandas import DataFrame
fruitFrame = DataFrame(fruitData)

fruitFrame

#컬럼 순서 지정하기

fruitFrame = DataFrame(fruitData, columns=['fruitPrice','num','fruitName'])
fruitFrame

# 특정 항목 추출
fruitFrame['fruitName'] #데이터로 접근

fruitFrame.fruitName #객체로 접근

#컬럼 추가하기
fruitFrame['Year'] = '2022'

fruitFrame

# Series 객체의 추가
variable = Series([4,2,1],index = [0,2,3]) #인덱스 값에 맞춰 들어감, 빈칸은 Null값이 들어감
fruitFrame['Stock'] = variable

fruitFrame

#자료 구조 다루기
fruit

fruit.drop('banana') #안의 내용이 지워긴 객체를 리턴

fruit

newFruit = fruit.drop('banana')
newFruit
#삭제를 업데이트 하려면
fruit = fruit.drop('banana')

#인덱스를 숫자가 아니게 지정
fruitData

#과일 이름을 인덱스로 사용하기
fruitName = fruitData['fruitName']
fruitName

fruitFrame = DataFrame(fruitData, index=fruitName, columns=['fruitPrice','num'])
fruitFrame

newFruitFrame = fruitFrame.drop(['apple','cherry'])
newFruitFrame

newFruitFrame = fruitFrame.drop(['num'], axis = 1)
newFruitFrame

#Pandas Slice 사용하는 방법
fruit

fruit[:]

fruit['apple':'peer'] #apple에서 peer

fruit[:'peer']

#Series 객체의 기본 연산
fruit1 = Series([5,9,10,3], index=['apple','banana','cherry','peer'])
fruit2 = Series([3,2,9,5,10], index = ['apple','orange','banana','cherry','mango'])
newFruit = fruit1+fruit2
newFruit

#DataFrame의 객체의 기본 연산
fruitData1 = {'Ohio':[4,8,3,5], 'Texas':[0,1,2,3]}
fruitData2 = {'Ohio':[3,0,2,1,7],'Colorado':[5,4,3,6,0]}
fruitFrame1 = DataFrame(fruitData1, columns=['Ohio','Texas'], index = ['apple','banana','cherry','peer'])
fruitFrame2 = DataFrame(fruitData2, columns=['Ohio','Colorado'], index = ['apple','orange','banana','cherry','mango'])

fruitFrame1

fruitFrame2

newFruitFrame = fruitFrame1 + fruitFrame2
newFruitFrame

#데이터의 정렬

#Series의 정렬
fruit

fruit.sort_values()

fruit.sort_values(ascending=False)  #fruit.sort_values(ascending=True)     acending=True일때 정방향, False일때 역방향

fruitName = fruitData['fruitName']

fruitFrame = DataFrame(fruitData, index=fruitName, columns=['num','fruitPrice'])
fruitFrame

fruitFrame.sort_index(ascending=False) #인덱스 기준 정렬

fruitFrame.sort_index(axis=1)

fruitFrame.sort_values(by=['fruitPrice','num'])

# Pandas를 이용한 기초 분석

import pandas as pd

german = pd.read_csv('http://freakonometrics.free.fr/german_credit.csv')

type(german)

german.columns.values

german_sample = german[['Creditability','Duration of Credit (month)','Purpose','Credit Amount']]

german_sample

german_sample.min()

german_sample.max()

german_sample.mean()

german_sample.head() #head : 5개를 미리 보여줌

german_sample.corr()

#Group By를 이용한 계산 및 요약 통계

german_sample = german[['Credit Amount','Type of apartment']]
german_sample

german_grouped = german_sample['Credit Amount'].groupby((german_sample['Type of apartment']))

german_grouped.mean()

german_grouped.max()

german_grouped.min()

german_sample = german[['Type of apartment','Sex & Marital Status','Credit Amount']]

german_sample

for type, group in german_sample.groupby('Type of apartment'): #key가 type에 들어감, 그룹화된 데이터는 group에 들어감
  print(type)
  print(group.head())

for (type, sex), group in german_sample.groupby(['Type of apartment', 'Sex & Marital Status']): #2개가 하나의 값으로 튜플형태로 (type, sex)에 들어감, 그룹화된 데이터는 group에 들어감
  print(type, sex)
  print(group.head(n=3))

#행성 데이터 가져오기
import seaborn as sns

planets = sns.load_dataset('planets')

planets.shape

planets.ndim

planets.head()

planets.head

planets.dropna() #dropna(): null값 제외 후 출력

#미국 인구 통계 데이터 실습
births = pd.read_csv('https://raw.githubusercontent.com/jakevdp/data-CDCbirths/master/births.csv')

births.shape

births.head()

births['year']//10*10 
#// 나머지 버림

births['decade'] = births['year']//10*10

births.head()

births.pivot_table('births', index='decade', columns='gender', aggfunc='sum')

import matplotlib.pyplot as plt

births.pivot_table('births', index='year', columns = 'gender', aggfunc='sum').plot()

